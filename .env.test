# =============================================================================
# MASTRA CHAT SDK - TEST ENVIRONMENT CONFIGURATION
# =============================================================================
# This file is used for running automated tests
# Copy your actual values here and ensure you're using a TEST DATABASE

# =============================================================================
# ENVIRONMENT IDENTIFICATION
# =============================================================================
NODE_ENV=test
PLAYWRIGHT=true
DEBUG_SQL=false

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
NEXTAUTH_URL=http://localhost:3000

# Generate a test-specific secret for authentication
# You can use the same secret as development for tests
AUTH_SECRET=your-auth-secret-here

# =============================================================================
# TEST DATABASE CONFIGURATION (CRITICAL)
# =============================================================================
# ⚠️  IMPORTANT: Use a dedicated TEST database - NEVER use production!
# 
# RECOMMENDED: Use Neon database test branches for isolation
# Format: postgresql://user:pass@branch-name-project-id.region.neon.tech/dbname?sslmode=require
# 
# Example Neon test branch:
# POSTGRES_URL=postgresql://user:pass@test-branch-abc123-def456.us-east-1.neon.tech/neondb?sslmode=require
#
# Local test database alternative:
# POSTGRES_URL=postgresql://postgres:password@localhost:5432/mastra_chat_test
#
# The system will validate that this is a test database before running tests
POSTGRES_URL=your-test-postgres-url-here
DATABASE_URL=your-test-postgres-url-here

# =============================================================================
# AI & ML SERVICES (Same as development)
# =============================================================================

# OpenAI API Key (REQUIRED for AI tests)
# Get your API key: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# Cohere API Key (REQUIRED for RAG tests)
# Get your API key: https://dashboard.cohere.ai/api-keys
COHERE_API_KEY=your-cohere-api-key-here

# xAI API Key (OPTIONAL)
# XAI_API_KEY=xai-your-xai-api-key-here

# =============================================================================
# FILE STORAGE (For upload tests)
# =============================================================================

# Vercel Blob Storage Token (REQUIRED for file upload tests)
BLOB_READ_WRITE_TOKEN=your-blob-token-here

# =============================================================================
# OBSERVABILITY & DEBUGGING (Optional for tests)
# =============================================================================

# LangSmith Configuration (OPTIONAL - for debugging test failures)
# LANGSMITH_API_KEY=ls__your-langsmith-api-key-here
# LANGSMITH_PROJECT=mastra-chat-sdk-tests

# =============================================================================
# TEST-SPECIFIC CONFIGURATIONS
# =============================================================================

# Test mode flags
TEST_MODE=true
SKIP_AUTH_IN_TESTS=true
ENABLE_TEST_ROUTES=true

# Test database settings
TEST_DB_RESET_ON_START=false
TEST_DB_SEED_SAMPLE_DATA=true
TEST_PARALLEL_WORKERS=4

# Test timeouts (milliseconds)
TEST_TIMEOUT_DEFAULT=30000
TEST_TIMEOUT_E2E=60000
TEST_TIMEOUT_DATABASE=10000

# =============================================================================
# FEATURE FLAGS FOR TESTING
# =============================================================================

# Enable/disable features during testing
ENABLE_VOICE_CHAT=true
ENABLE_DOCUMENT_UPLOAD=true
ENABLE_RAG_SYSTEM=true
ENABLE_GUEST_ACCESS=false
ENABLE_LANGSMITH_TRACING=false

# =============================================================================
# NEON DATABASE TEST BRANCH SETUP INSTRUCTIONS
# =============================================================================
#
# To set up a Neon test branch:
# 
# 1. Login to Neon Console: https://console.neon.tech/
# 2. Navigate to your project
# 3. Go to "Branches" tab
# 4. Click "Create Branch"
# 5. Name it "test" or "test-main"
# 6. Select your main branch as the parent
# 7. Copy the connection string
# 8. Replace POSTGRES_URL above with your test branch URL
#
# Benefits of test branches:
# - Complete data isolation from production
# - Same schema as production
# - Fast branch creation and deletion
# - Cost-effective for testing
# - Can be reset/recreated as needed
#
# =============================================================================
# TEST DATABASE VALIDATION
# =============================================================================
#
# The test system will validate your database configuration:
# ✅ Ensures you're not using production database
# ✅ Confirms pgvector extension availability
# ✅ Validates connection and permissions
# ✅ Checks for required tables after migration
# ✅ Seeds sample RoboRail data for testing
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Common issues and solutions:
#
# 1. "POSTGRES_URL is not configured" error:
#    - Set your actual test database URL above
#    - Ensure URL format is correct
#
# 2. "pgvector extension not found" warning:
#    - Run: CREATE EXTENSION vector; on your test database
#    - This may require superuser privileges
#
# 3. Connection timeouts:
#    - Check your network connection
#    - Verify database credentials
#    - Ensure test branch is active (Neon)
#
# 4. Migration failures:
#    - Ensure test database is empty or properly migrated
#    - Run: bun run db:test:migrate
#
# 5. Test data conflicts:
#    - Reset test database: bun run db:test:reset
#    - Re-seed data: bun run db:test:seed
#
# =============================================================================
# SECURITY NOTES FOR TEST ENVIRONMENT
# =============================================================================
#
# 1. Never use production database URLs in tests
# 2. Use separate API keys for testing (optional)
# 3. Test data should not contain real user information
# 4. Regularly clean up test databases and branches
# 5. Rotate test API keys periodically
# 6. Monitor test database usage and costs
#
# =============================================================================